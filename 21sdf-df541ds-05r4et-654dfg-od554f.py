import discord
import random
import string
import json
import aiohttp
import base64
from discord.ext import commands
from discord.ui import Button, View, Modal, TextInput
from discord import app_commands
import asyncio
import time
import itertools
import sys
import os
from dotenv import load_dotenv

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ
spinner_running = True
last_reset_time = {}
COOLDOWN_SECONDS = 300  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ

load_dotenv()

token = os.getenv("DISCORD_TOKEN")

GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_FILE_URL = os.getenv("GITHUB_FILE_URL")

def generate_key():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=20))

async def fetch_github_data():
    async with aiohttp.ClientSession() as session:
        try:
            headers = {"Authorization": f"token {GITHUB_TOKEN}"}
            async with session.get(GITHUB_FILE_URL, headers=headers) as resp:
                if resp.status == 200:
                    return await resp.json()
                else:
                    print(f"‚ùå GitHub API Error: {resp.status}")
                    return None
        except Exception as e:
            print(f"‚ùå Exception: {e}")
            return None

async def update_github_data(new_data_encoded):
    current_data = await fetch_github_data()
    if current_data is None:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å GitHub ‡πÑ‡∏î‡πâ")
        return False

    sha = current_data.get("sha", "")
    if not sha:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ SHA ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô GitHub")
        return False

    async with aiohttp.ClientSession() as session:
        headers = {
            "Authorization": f"token {GITHUB_TOKEN}",
            "Accept": "application/vnd.github.v3+json"
        }
        payload = {
            "message": "Update HWID data",
            "content": new_data_encoded,
            "sha": sha
        }
        async with session.put(GITHUB_FILE_URL, headers=headers, json=payload) as resp:
            if resp.status in [200, 201]:
                print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                return True
            else:
                print(f"‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {resp.status}")
                return False

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡πÉ‡∏ä‡πâ
intents = discord.Intents.default()
intents.messages = True

bot = commands.Bot(command_prefix='/', intents=intents)

async def spinning_cursor():
    while spinner_running:
        for cursor in itertools.cycle(['|', '/', '-', '\\']):
            if not spinner_running:
                break
            sys.stdout.write(f'\r‚åõ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô... {cursor}')
            sys.stdout.flush()
            await asyncio.sleep(0.1)

@bot.tree.command(name="setup", description="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°")
async def setup(interaction: discord.Interaction):
    if not interaction.guild:
        await interaction.response.send_message("‚ùå **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå!**", ephemeral=True)
        return

    #allowed_user_id = 1119509280480038972
    #if interaction.user.id != allowed_user_id:
        #await interaction.response.send_message("üö´ **‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!**", ephemeral=True)
        #return
    if not any(role.name == "AM" for role in interaction.user.roles):
        await interaction.response.send_message("üö´ **‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!**", ephemeral=True)
        return
    # ‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á Embed ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    embed = discord.Embed(
        title="‚ú® **Script All Map** ‚ú®",
        description="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á",
        color=0x0094FF      # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
    )
    embed.add_field(name="üéÆ Get Script", value="‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", inline=False)
    embed.add_field(name="üñ•Ô∏è Add HWID", value="‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° HWID", inline=False)
    embed.add_field(name="üîÑ Reset HWID", value="‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï HWID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", inline=False)
    embed.add_field(name="‚ÑπÔ∏è Info", value="‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", inline=False)
    embed.add_field(name="üö© ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Ñ‡∏ß‡∏£‡∏≠‡πà‡∏≤‡∏ô!", value=" ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏¢‡∏®Buyer‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ | ‡∏ñ‡πâ‡∏≤‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡πÄ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏≠‡∏¢‡∏π‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó | ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏ñ‡∏≤‡∏°‡πÄ‡πÄ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ", inline=False)

    embed.set_image(url="https://i.pinimg.com/originals/2d/cb/fb/2dcbfb5e2a596669fc685b347c2c115c.gif")

    # ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡πÑ‡∏î‡πâ
    button1 = Button(label="üéÆ Get Script", style=discord.ButtonStyle.primary)
    button2 = Button(label="üñ•Ô∏è Add HWID", style=discord.ButtonStyle.primary)
    button3 = Button(label="üîÑ Reset HWID", style=discord.ButtonStyle.primary)
    button4 = Button(label="‚ÑπÔ∏è Info", style=discord.ButtonStyle.secondary)

    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°
    async def get_script_callback(interaction: discord.Interaction):
        script_message = f"""üîπ **‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì**\n
```lua
getgenv().Key = \"{interaction.user.id}\" 
loadstring(game:HttpGet('https://raw.githubusercontent.com/xOne2/_dasd234/refs/heads/main/sdada.lua'))()
```"""
        await interaction.response.send_message(script_message, ephemeral=True)

    async def add_hwid_callback(interaction: discord.Interaction):
        if not any(role.name == "Buyer" for role in interaction.user.roles):
            await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏¢‡∏® 'Buyer' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ!", ephemeral=True)
            return
        
        modal = Modal(title="Add HWID")
        modal.add_item(TextInput(label="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà HWID"))

        async def on_submit(modal_interaction: discord.Interaction):
            user_id = str(modal_interaction.user.id)
            hwid = modal.children[0].value.strip()

            github_content = await fetch_github_data()
            if not github_content:
                await modal_interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å GitHub ‡πÑ‡∏î‡πâ", ephemeral=True)
                return

            decoded_content = base64.b64decode(github_content["content"]).decode()

            if f'Key = "{user_id}"' in decoded_content:
                await modal_interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° HWID ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ Reset HWID!", ephemeral=True)
                return

            insert_line = f'    {{ Hwid = "{hwid}", Key = "{user_id}" , ExpiryDate = math.huge, Permanent = true }},\n'
            if "local whitelistPak = {" in decoded_content:
                new_data = decoded_content.replace("local whitelistPak = {\n", f"local whitelistPak = {{\n{insert_line}")
            else:
                new_data = f'local whitelistPak = {{\n{insert_line}}}\nreturn whitelistPak'

            encoded = base64.b64encode(new_data.encode()).decode()
            success = await update_github_data(encoded)

            if success:
                print(f"[{modal_interaction.user}] ‡∏™‡πà‡∏á HWID ‡πÉ‡∏´‡∏°‡πà: {hwid}")
                await modal_interaction.response.send_message(f'‚úÖ HWID : {hwid} KEY : {user_id} ', ephemeral=True)
            else:
                await modal_interaction.response.send_message("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!", ephemeral=True)

        modal.on_submit = on_submit
        await interaction.response.send_modal(modal)

    async def reset_hwid_callback(interaction: discord.Interaction):
        if not any(role.name == "Buyer" for role in interaction.user.roles):
            await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏¢‡∏® @Buyer  ‡∏Å‡πà‡∏≠‡∏ô! ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ! ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô @OneWiz ", ephemeral=True)
            return
        user_id = str(interaction.user.id)
        now = time.time()

        if user_id in last_reset_time:
            elapsed = now - last_reset_time[user_id]
            if elapsed < COOLDOWN_SECONDS:
                remaining = int(COOLDOWN_SECONDS - elapsed)
                await interaction.response.send_message(f"‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏≠‡∏µ‡∏Å {remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï HWID ‡πÉ‡∏´‡∏°‡πà", ephemeral=True)
                return
            
        modal = Modal(title="Reset HWID")
        modal.add_item(TextInput(label="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà HWID ‡πÉ‡∏´‡∏°‡πà"))

        async def on_submit(modal_interaction: discord.Interaction):
            user_id = str(modal_interaction.user.id)
            new_hwid = modal.children[0].value.strip()

            github_content = await fetch_github_data()
            if not github_content:
                await modal_interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å GitHub ‡πÑ‡∏î‡πâ", ephemeral=True)
                return

            decoded_content = base64.b64decode(github_content["content"]).decode()

            lines = decoded_content.split("\n")
            updated_lines = []
            found = False

            for line in lines:
                if f'Key = "{user_id}"' in line:
                    updated_lines.append(f'    {{ Hwid = "{new_hwid}", Key = "{user_id}", ExpiryDate = math.huge, Permanent = true }},')
                    found = True
                else:
                    updated_lines.append(line)

            if not found:
                await modal_interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ Add HWID ‡∏Å‡πà‡∏≠‡∏ô!", ephemeral=True)
                return

            new_data = "\n".join(updated_lines)
            encoded = base64.b64encode(new_data.encode()).decode()
            success = await update_github_data(encoded)

            if success:
                print(f"[{modal_interaction.user}] ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï HWID ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô: {  new_hwid}")
                last_reset_time[user_id] = time.time()
                await modal_interaction.response.send_message(f'‚úÖ NEW_HWID : {new_hwid} KEY : {user_id}', ephemeral=True)
            else:
                await modal_interaction.response.send_message("‚ùå ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!", ephemeral=True)

        modal.on_submit = on_submit
        await interaction.response.send_modal(modal)

    async def info_callback(interaction: discord.Interaction):
        info_message = """**üîπ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó**
- ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ HWID ‡πÅ‡∏•‡∏∞ Key ‡∏Ç‡∏≠‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
- ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ MrMaxNaJa"""
        await interaction.response.send_message(info_message, ephemeral=True)

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°
    button1.callback = get_script_callback
    button2.callback = add_hwid_callback
    button3.callback = reset_hwid_callback
    button4.callback = info_callback

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô View
    view = View()
    view.add_item(button1)
    view.add_item(button2)
    view.add_item(button3)
    view.add_item(button4)

    # ‡∏™‡πà‡∏á Embed ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°
    await interaction.response.send_message(embed=embed, view=view)


@bot.tree.command(name="getscript", description="‡∏£‡∏±‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
async def get_script_command(interaction: discord.Interaction):
    script_message = f"""üîπ **‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì**\n
```lua
getgenv().Key = \"{interaction.user.id}\" 
loadstring(game:HttpGet('https://raw.githubusercontent.com/xOne2/_dasd234/refs/heads/main/sdada.lua'))()
```"""
    await interaction.response.send_message(script_message, ephemeral=True)


@bot.tree.command(name="addhwid", description="‡πÄ‡∏û‡∏¥‡πà‡∏° HWID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
async def add_hwid_command(interaction: discord.Interaction):
    if not interaction.guild:
        await interaction.response.send_message("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå!", ephemeral=True)
        return
    if not any(role.name == "Buyer" for role in interaction.user.roles):
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏¢‡∏® 'Buyer' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!", ephemeral=True)
        return

    modal = Modal(title="Add HWID")
    modal.add_item(TextInput(label="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà HWID"))

    async def on_submit(modal_interaction: discord.Interaction):
        user_id = str(modal_interaction.user.id)
        hwid = modal.children[0].value.strip()

        github_content = await fetch_github_data()
        if not github_content:
            await modal_interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å GitHub ‡πÑ‡∏î‡πâ", ephemeral=True)
            return

        decoded_content = base64.b64decode(github_content["content"]).decode()

        if f'Key = "{user_id}"' in decoded_content:
            await modal_interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° HWID ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ Reset HWID!", ephemeral=True)
            return

        insert_line = f'    {{ Hwid = "{hwid}", Key = "{user_id}" , ExpiryDate = math.huge, Permanent = true }},\n'
        if "local whitelistPak = {" in decoded_content:
            new_data = decoded_content.replace("local whitelistPak = {\n", f"local whitelistPak = {{\n{insert_line}")
        else:
            new_data = f'local whitelistPak = {{\n{insert_line}}}\nreturn whitelistPak'

        encoded = base64.b64encode(new_data.encode()).decode()
        success = await update_github_data(encoded)

        if success:
            print(f"[{modal_interaction.user}] ‡∏™‡πà‡∏á HWID ‡πÉ‡∏´‡∏°‡πà: {hwid}")
            await modal_interaction.response.send_message(f'‚úÖ HWID : {hwid} KEY : {user_id}', ephemeral=True)
        else:
            await modal_interaction.response.send_message("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!", ephemeral=True)

    modal.on_submit = on_submit
    await interaction.response.send_modal(modal)


@bot.tree.command(name="resethwid", description="‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï HWID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
async def reset_hwid_command(interaction: discord.Interaction):
    if not interaction.guild:
        await interaction.response.send_message("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå!", ephemeral=True)
        return
    if not any(role.name == "Buyer" for role in interaction.user.roles):
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏¢‡∏® 'Buyer' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!", ephemeral=True)
        return

    user_id = str(interaction.user.id)
    now = time.time()

    if user_id in last_reset_time:
        elapsed = now - last_reset_time[user_id]
        if elapsed < COOLDOWN_SECONDS:
            remaining = int(COOLDOWN_SECONDS - elapsed)
            await interaction.response.send_message(f"‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏≠‡∏µ‡∏Å {remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï HWID ‡πÉ‡∏´‡∏°‡πà", ephemeral=True)
            return

    modal = Modal(title="Reset HWID")
    modal.add_item(TextInput(label="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà HWID ‡πÉ‡∏´‡∏°‡πà"))

    async def on_submit(modal_interaction: discord.Interaction):
        user_id = str(modal_interaction.user.id)
        new_hwid = modal.children[0].value.strip()

        github_content = await fetch_github_data()
        if not github_content:
            await modal_interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å GitHub ‡πÑ‡∏î‡πâ", ephemeral=True)
            return

        decoded_content = base64.b64decode(github_content["content"]).decode()

        lines = decoded_content.split("\n")
        updated_lines = []
        found = False

        for line in lines:
            if f'Key = "{user_id}"' in line:
                updated_lines.append(f'    {{ Hwid = "{new_hwid}", Key = "{user_id}", ExpiryDate = math.huge, Permanent = true }},')
                found = True
            else:
                updated_lines.append(line)

        if not found:
            await modal_interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ Add HWID ‡∏Å‡πà‡∏≠‡∏ô!", ephemeral=True)
            return

        new_data = "\n".join(updated_lines)
        encoded = base64.b64encode(new_data.encode()).decode()
        success = await update_github_data(encoded)

        if success:
            print(f"[{modal_interaction.user}] ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï HWID ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô: {new_hwid}")
            last_reset_time[user_id] = time.time()
            await modal_interaction.response.send_message(f'‚úÖ NEW_HWID : {new_hwid} KEY : {user_id}', ephemeral=True)
        else:
            await modal_interaction.response.send_message("‚ùå ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!", ephemeral=True)

    modal.on_submit = on_submit
    await interaction.response.send_modal(modal)


@bot.tree.command(name="info", description="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ")
async def info_command(interaction: discord.Interaction):
    info_message = """**üîπ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó**
- ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ HWID ‡πÅ‡∏•‡∏∞ Key ‡∏Ç‡∏≠‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
- ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ MrMaxNaJa"""
    await interaction.response.send_message(info_message, ephemeral=True)


@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')
    await bot.tree.sync()

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏±‡∏ß‡∏ö‡∏ô‡∏ö‡∏≠‡∏ó
async def main():
    spinner_thread = asyncio.create_task(spinning_cursor())
    await bot.start(token)
    print("End")

asyncio.run(main())
print("End")
